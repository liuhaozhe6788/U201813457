列车重排
班级:电信1808
姓名:刘浩哲
学号:U201813457
完成日期:2019年4月14日
1需求分析
（1）输入列车的节数为正整数
（2）输出所有排列
（3）编号顺序为1，2……n的列车，每节车厢随机进栈出栈最后得到所有排列
（4）输入为2，输出
    1:1 2
    2:2 1
    输入为4，输出
    1:     4     3     2     1

2:     3     4     2     1

3:     3     2     4     1

4:     3     2     1     4

5:     2     4     3     1

6:     2     3     4     1

7:     2     3     1     4

8:     2     1     4     3

9:     2     1     3     4

10:     1     4     3     2

11:     1     3     4     2

12:     1     3     2     4

13:     1     2     4     3

14:     1     2     3     4
2概要设计
用数组定义一个栈
调用函数有:栈的初始化，进栈，出栈，得到顶部元素和找到并打印所有序列
主函数输入列车数调用初始化函数和寻找函数
寻找函数调用进栈，出栈和得到顶部元素的函数
3详细设计
#include <stdio.h>

#define SIZE 1000

typedef struct{

    int top;

    int A[SIZE];

}Stack;//建栈

int m=1;//全局变量计数序列的个数

void init(Stack *s){

    s->top=0;

}//栈的初始化

void Push(Stack *s,int e){

    s->A[s->top]=e;

    s->top++;

}//进栈

void Pop(Stack *s){

    if(s->top!=0)

       --s->top;

}//出栈

int GetTop(Stack *s){

    return s->A[s->top-1];

}//得到顶部元素

void find(int pos,Stack *s,int num[],int No,int n){

    if(pos<=n){

        Push(s,pos);//pos号列车进栈

        find(pos+1,s,num,No,n);//1，2，3……pos号进栈后，找到所有可能情况

        Pop(s);//pos号出栈，遍历得到所有序列，并最终保证递归函数结束

    }

    if(s->top!=0){//形成序列

        int temp=GetTop(s);

        Pop(s);

        num[No]=temp;

        find(pos,s,num,No+1,n);

        Push(s,temp);回到上一层递归时栈的状态

    }

    if(pos>n&&s->top==0){//得到的一个序列打印下来

        printf("%d:",m++);

        for(int j=0;j<No;j++)

            printf("%6d",num[j]);

        printf("\n");

    }

}

int main()

{

    int n,num[20];

    printf("please input the number of the trains:\n");

    scanf("%d",&n);

    Stack s;

    init(&s);

    printf("the results are:\n");

    find(1,&s,num,0,n);

    return 0;

}
4调试分析
（1）调用函数时栈未用指针，任意让一个数进栈，打印结果发现问题
（2）T（n）=O（n*2），S（n）=O（n*2）
5用户说明
只需输入列车节数即可获得所有排列
6测试结果
输入2
输出
1:     2     1

2:     1     2
输入3
输出
1:     3     2     1
2:     2     3     1
3:     2     1     3
4:     1     3     2
5:     1     2     3
输入4
输出
1:     4     3     2     1
2:     3     4     2     1
3:     3     2     4     1
4:     3     2     1     4
5:     2     4     3     1
6:     2     3     4     1
7:     2     3     1     4
8:     2     1     4     3
9:     2     1     3     4
10:     1     4     3     2
11:     1     3     4     2
12:     1     3     2     4
13:     1     2     4     3
14:     1     2     3     4
输入5
输出
please input the number of the trains:

5

the results are:

1:     5     4     3     2     1

2:     4     5     3     2     1

3:     4     3     5     2     1

4:     4     3     2     5     1

5:     4     3     2     1     5

6:     3     5     4     2     1

7:     3     4     5     2     1

8:     3     4     2     5     1

9:     3     4     2     1     5

10:     3     2     5     4     1

11:     3     2     4     5     1

12:     3     2     4     1     5

13:     3     2     1     5     4

14:     3     2     1     4     5

15:     2     5     4     3     1

16:     2     4     5     3     1

17:     2     4     3     5     1

18:     2     4     3     1     5

19:     2     3     5     4     1

20:     2     3     4     5     1

21:     2     3     4     1     5

22:     2     3     1     5     4

23:     2     3     1     4     5

24:     2     1     5     4     3

25:     2     1     4     5     3

26:     2     1     4     3     5

27:     2     1     3     5     4

28:     2     1     3     4     5

29:     1     5     4     3     2

30:     1     4     5     3     2

31:     1     4     3     5     2

32:     1     4     3     2     5

33:     1     3     5     4     2

34:     1     3     4     5     2

35:     1     3     4     2     5

36:     1     3     2     5     4

37:     1     3     2     4     5

38:     1     2     5     4     3

39:     1     2     4     5     3

40:     1     2     4     3     5

41:     1     2     3     5     4

42:     1     2     3     4     5
                
